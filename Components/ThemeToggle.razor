@using Microsoft.JSInterop
@inject IJSRuntime JS

<div class="theme-toggle-container">
    @if (IsDesktop)
    {
        <!-- Desktop theme toggle - dropdown in top-right -->
        <div class="relative">
            <button @onclick="ToggleDropdown" 
                    class="flex items-center p-2 text-gray-600 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 rounded-md"
                    aria-label="Toggle theme">
                @if (currentTheme == "light")
                {
                    <Blazicon Svg="BootstrapIcon.SunFill" class="text-lg" />
                }
                else if (currentTheme == "dark")
                {
                    <Blazicon Svg="BootstrapIcon.MoonFill" class="text-lg" />
                }
                else
                {
                    <Blazicon Svg="BootstrapIcon.CircleHalf" class="text-lg" />
                }
            </button>
            
            @if (isDropdownOpen)
            {
                <div class="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-md shadow-lg ring-1 ring-black ring-opacity-5 dark:ring-gray-600 z-50">
                    <div class="py-1" role="menu">
                        <button @onclick="@(() => SetTheme("light"))" 
                                class="@GetMenuItemClass("light") w-full text-left px-4 py-2 text-sm flex items-center">
                            <Blazicon Svg="BootstrapIcon.SunFill" class="mr-3" />
                            Light
                        </button>
                        <button @onclick="@(() => SetTheme("dark"))" 
                                class="@GetMenuItemClass("dark") w-full text-left px-4 py-2 text-sm flex items-center">
                            <Blazicon Svg="BootstrapIcon.MoonFill" class="mr-3" />
                            Dark
                        </button>
                        <button @onclick="@(() => SetTheme("system"))" 
                                class="@GetMenuItemClass("system") w-full text-left px-4 py-2 text-sm flex items-center">
                            <Blazicon Svg="BootstrapIcon.CircleHalf" class="mr-3" />
                            Use system theme
                        </button>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <!-- Mobile theme controls - switch + system checkbox -->
        <div class="px-3 py-2 border-t border-gray-200 dark:border-gray-600">
            <div class="flex items-center justify-between">
                <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Theme</span>
                <div class="flex items-center space-x-3">
                    <!-- Light/Dark Switch -->
                    <div class="flex items-center">
                        <span class="text-xs text-gray-500 dark:text-gray-400 mr-2">
                            <Blazicon Svg="BootstrapIcon.SunFill" />
                        </span>
                        <button @onclick="ToggleLightDark" 
                                disabled="@(currentTheme == "system")"
                                class="@GetSwitchClass() relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800">
                            <span class="@GetSwitchKnobClass() inline-block h-4 w-4 transform rounded-full bg-white transition"></span>
                        </button>
                        <span class="text-xs text-gray-500 dark:text-gray-400 ml-2">
                            <Blazicon Svg="BootstrapIcon.MoonFill" />
                        </span>
                    </div>
                    
                    <!-- System Theme Checkbox -->
                    <label class="flex items-center">
                        <input type="checkbox" 
                               checked="@(currentTheme == "system")" 
                               @onchange="ToggleSystemTheme"
                               class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 dark:border-gray-600 rounded">
                        <span class="ml-2 text-xs text-gray-600 dark:text-gray-400">System</span>
                    </label>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public bool IsDesktop { get; set; } = true;
    
    private string currentTheme = "system";
    private bool isDropdownOpen = false;
    private IJSObjectReference? jsModule;
    private DotNetObjectReference<ThemeToggle>? dotNetRef;

    protected override async Task OnInitializedAsync()
    {
        dotNetRef = DotNetObjectReference.Create(this);
        jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/theme.js");
        
        // Get current theme from JavaScript using window.themeManager
        try 
        {
            currentTheme = await JS.InvokeAsync<string>("eval", "window.themeManager.getCurrentTheme()");
        }
        catch
        {
            currentTheme = "system"; // fallback
        }
    }

    [JSInvokable]
    public async Task OnThemeChanged(string theme)
    {
        currentTheme = theme;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SetTheme(string theme)
    {
        currentTheme = theme;
        isDropdownOpen = false;
        
        try
        {
            await JS.InvokeVoidAsync("eval", $"window.themeManager.setTheme('{theme}')");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to set theme: {ex.Message}");
        }
        
        StateHasChanged();
    }

    private async Task ToggleLightDark()
    {
        if (currentTheme == "system") return;
        
        var newTheme = currentTheme == "light" ? "dark" : "light";
        await SetTheme(newTheme);
    }

    private async Task ToggleSystemTheme(ChangeEventArgs e)
    {
        if (e.Value is bool useSystem)
        {
            if (useSystem)
            {
                await SetTheme("system");
            }
            else
            {
                // Default to light when unchecking system
                await SetTheme("light");
            }
        }
    }

    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }

    private string GetMenuItemClass(string theme)
    {
        var baseClass = "text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors";
        if (currentTheme == theme)
        {
            baseClass += " bg-blue-50 dark:bg-blue-900 text-blue-700 dark:text-blue-300";
        }
        return baseClass;
    }

    private string GetSwitchClass()
    {
        var baseClass = "relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800";
        
        if (currentTheme == "system")
        {
            return baseClass + " bg-gray-300 dark:bg-gray-600 opacity-50 cursor-not-allowed";
        }
        
        if (currentTheme == "dark")
        {
            return baseClass + " bg-blue-600";
        }
        
        return baseClass + " bg-gray-200 dark:bg-gray-600";
    }

    private string GetSwitchKnobClass()
    {
        var baseClass = "inline-block h-4 w-4 transform rounded-full bg-white transition";
        
        if (currentTheme == "dark")
        {
            return baseClass + " translate-x-6";
        }
        
        return baseClass + " translate-x-1";
    }

    public void Dispose()
    {
        jsModule?.DisposeAsync();
        dotNetRef?.Dispose();
    }
}