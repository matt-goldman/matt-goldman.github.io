@page "/"
@inject IJSRuntime JS

<PageTitle>GoForGoldman - Home</PageTitle>

<!-- Hero Section -->
<header class="bg-white">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div class="flex flex-row items-center justify-center gap-5">
            <img src="/images/default.png" alt="Default Image" class="rounded-full">
            <div>
                <h2 class="text-4xl font-bold text-gray-900 mb-4">GoForGoldman</h2>
                <p class="text-xl text-gray-600 max-w-2xl mx-auto">Hi, I'm Matt. I talk about mobile dev, .NET, VR, motorcycles, homebrewing, Superman, science, and sometimes other things.</p>
            </div>
        </div>
    </div>
</header>

<!-- Trending Topics Section -->
<section class="mb-12">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        <h3 class="text-2xl font-bold text-gray-900 mb-4">Trending Topics</h3>
        <div class="flex flex-wrap gap-3">
            @foreach (var topic in _trendingTopics)
            {
                var color = topic.Topic.GetChipColor();
                var topicClass = $"bg-{color}-100 dark:bg-{color}-900 text-{color}-800 dark:text-{color}-200 hover:bg-{color}-200 dark:hover:bg-{color}-800";
                <a href="@topic.Slug" class="@topicClass px-4 py-2 rounded-full text-sm font-medium transition-colors">
                    @topic.Topic
                    <span class="ml-1 text-xs opacity-75">(@topic.Count)</span>
                </a>
            }
        </div>
    </div>
</section>

<main class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Featured Post -->
    @if (_featuredPost is not null)
    {
        <section class="mb-12">
            <h3 class="text-2xl font-bold text-gray-900 mb-6">Featured Post</h3>
            <article class="bg-white rounded-lg shadow-md overflow-hidden">
                <div class="md:flex">
                    <div class="md:w-1/3">
                        <img src="@(string.IsNullOrEmpty(_featuredPost.Image) ? "https://placeholder.pics/svg/400x300/DFEEF6-B6BEC3/000000" : _featuredPost.Image)" alt="Featured post image" class="w-full h-48 md:h-full object-cover">
                    </div>
                    <div class="md:w-2/3 p-6">
                        <div class="flex items-center mb-2">
                            <span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded">@(_featuredPost.Tags.FirstOrDefault() ?? string.Empty)</span>
                            <span class="text-gray-500 text-sm ml-3">@($"{_featuredPost.Date:MMM dd, yyyy}")</span>
                        </div>
                        <h4 class="text-2xl font-bold text-gray-900 mb-3">
                            <a href="@_featuredPost.Slug" class="hover:text-blue-600 transition-colors">@_featuredPost.Title</a>
                        </h4>
                        <p class="text-gray-600 mb-4">@_featuredPost.Description</p>
                        <Author Page=@_featuredPost />
                    </div>
                </div>
            </article>
        </section>
    }

    <!-- Recent Posts -->
    <PostGroup Title="Recent Posts" Posts="_allPosts" Page="@Page" PageChanged="SetQuery"></PostGroup>

</main>

<!-- Footer -->
<Footer></Footer>

@code {

    [SupplyParameterFromQuery]
    private int? Page { get; set; } = 1;

    private PageModel? _featuredPost;

    private List<PageModel> _allPosts = [];

    private List<TrendingTopic> _trendingTopics = [];

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (GeneratedContentIndex.GetPages().Count > 0)
        {
            _allPosts = GeneratedContentIndex.GetPages()
                .OrderByDescending(p => p.Date)
                .ToList();

            _featuredPost = _allPosts.FirstOrDefault(p => p.Metadata.ContainsKey("featured")) ?? _allPosts.FirstOrDefault();

            var topics = _allPosts
                .SelectMany(p => p.Tags)
                .GroupBy(t => t.Trim())
                .Select(g => new TrendingTopic(g.Key, g.Count(), $"/tags/{g.Key.Replace(" ", "-").ToLower()}"))
                .OrderByDescending(t => t.Count)
                .Take(8)
                .ToList();

            _trendingTopics = topics;
        }
    }

    private async Task SetQuery(int page)
    {
        await JS.InvokeVoidAsync("setPageQuery", page - 1, false);
    }

    private record TrendingTopic(string Topic, int Count, string Slug);
}
