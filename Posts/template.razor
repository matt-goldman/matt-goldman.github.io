@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager

<PageTitle>@Title</PageTitle>

<main class="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Breadcrumb -->
    <nav class="mb-8">
        <ol class="flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400">
            @foreach(var part in _breadcrumbs)
            {
                if (part == _breadcrumbs.Last())
                {
                    <li class="text-gray-900 dark:text-white">@part</li>;
                }
                else
                {
                    <li>
                        <a href="/@string.Join("/", _breadcrumbs.TakeWhile(p => p != part))" class="hover:text-gray-700 dark:hover:text-gray-300">@part</a>
                    </li>
                    <li><span>/</span></li>
                }
            }
        </ol>
    </nav>

    <!-- Article Header -->
    <header class="mb-8">
        <div class="flex items-center mb-4">
            <span class="@_chipBgColor @_chipTextColor @_chipDarkBgColor @_chipDarkTextColor text-sm font-medium px-3 py-1 rounded">@_primaryTag</span>
            <span class="text-gray-500 dark:text-gray-400 text-sm ml-4">@Published</span>
            <span class="text-gray-500 dark:text-gray-400 text-sm ml-4">@_estimatedReadingTime</span>
        </div>
        <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-4">@Title</h1>
        <p class="text-xl text-gray-600 dark:text-gray-300 mb-6">@Description</p>

        <!-- Author Info -->
        <Author Page="@_page" />
    </header>

    <!-- Featured Image -->
    <div class="mb-8">
        <img src="@_imageUrl" alt="Modern web development workspace" class="w-full h-64 md:h-96 object-cover rounded-lg shadow-md">
    </div>

    <!-- Article Content -->
    <article class="prose prose-lg max-w-none">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-8">
            @Body
        </div>
    </article>

    <!-- Article Footer -->
    <footer class="mt-8 pt-8 border-t border-gray-200 dark:border-gray-600">
        <div class="flex flex-wrap items-center justify-between">
            <div class="flex items-center space-x-4 mb-4 md:mb-0">
                <span class="text-gray-600 dark:text-gray-300">Share this article:</span>

                <a href="@_linkedinLink" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300">LinkedIn</a>
                <a href="@_facebookLink" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300">Facebook</a>
                <a href="@_blueskyLink" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300">Bluesky</a>
                <a href="@_redditUrl" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300">Reddit</a>
            </div>

            @if (_page?.Tags.Count > 1)
            {
                <div class="flex items-center space-x-4">
                    <span class="text-gray-600 dark:text-gray-300">Tags:</span>
                    @foreach (var tag in _page.Tags.Where(t => t != _primaryTag))
                    {
                        <span class="bg-@(tag.GetChipColor())-100 dark:bg-@(tag.GetChipColor())-800 text-@(tag.GetChipColor())-800 dark:text-@(tag.GetChipColor())-200 text-sm px-2 py-1 rounded">@tag</span>
                    }
                </div>
            }
        </div>
    </footer>

    <Giscus Repo="matt-goldman/matt-goldman.github.io"
        RepoId="MDEwOlJlcG9zaXRvcnkzMzQ1ODM1NDQ="
        Category="General"
        CategoryId="DIC_kwDOE_FW-M4Cgnmw"
        Mapping="pathname"
        Theme="@_giscusTheme" />

    <!-- Related Posts -->
    @if (_relatedPosts.Count > 0)
    {
        <section class="mt-12">
            <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">Related Posts</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                @foreach (var post in _relatedPosts)
                {
                    <article class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
                        <img src="@(post.Image ?? "https://placeholder.pics/svg/300x150/DFEEF6-B6BEC3/000000")" alt="@post.Title" class="w-full h-32 object-cover">
                        <div class="p-4">
                            <h4 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">
                                <NavLink href="@post.Slug" class="hover:text-blue-600 dark:hover:text-blue-400 transition-colors">@post.Title</NavLink>
                            </h4>
                            <p class="text-gray-600 dark:text-gray-300 text-sm">@post.Description.Truncate(80)</p>
                        </div>
                    </article>
                }
            </div>
        </section>
    }
</main>

<Footer />

@code {
    private string id = "@Id";

    private PageModel? _page;

    private List<PageModel> _relatedPosts = [];

    private List<string> _breadcrumbs = [];

    private string _primaryTag = "General";

    private string _chipBgColor = "bg-blue-100";
    private string _chipTextColor = "text-blue-800";
    private string _chipDarkBgColor = "dark:bg-blue-800";
    private string _chipDarkTextColor = "dark:text-blue-200";

    private string _giscusTheme = "light";

    private string _blueskyLink = "https://bsky.app/intent/compose?text=";
    private string _linkedinLink = "https://www.linkedin.com/shareArticle?mini=true&url=";
    private string _facebookLink = "https://www.facebook.com/sharer/sharer.php?u=";
    private string _redditUrl = "https://reddit.com/submit?";
    
    private string _estimatedReadingTime = string.Empty;

    string _imageUrl = "https://placeholder.pics/svg/800x400/DFEEF6-B6BEC3/000000";

    protected override void OnInitialized()
    {
        _page = GeneratedContentIndex.GetPages().FirstOrDefault(p => p.Id == id);

        if (_page == null)
        {
            throw new InvalidOperationException($"Page with ID '{id}' not found.");
        }

        _breadcrumbs = _page.Slug.Split('/').Where(part => !string.IsNullOrEmpty(part)).ToList();
        _breadcrumbs.Insert(0, "Home");
        _breadcrumbs[_breadcrumbs.Count - 1] = _page.Title;

        if (_page.Tags.Count > 0)
        {
            _primaryTag = _page.Tags[0];
            _chipBgColor = $"bg-{_primaryTag.GetChipColor()}-100";
            _chipTextColor = $"text-{_primaryTag.GetChipColor()}-800";
            _chipDarkBgColor = $"dark:bg-{_primaryTag.GetChipColor()}-800";
            _chipDarkTextColor = $"dark:text-{_primaryTag.GetChipColor()}-200";
        }

        if (!string.IsNullOrEmpty(_page.Image))
        {
            _imageUrl = _page.Image;
        }

        var otherPostsContainingPrimaryTag = GeneratedContentIndex.GetPages()
            .Where(p => p.Tags.Contains(_primaryTag) && p.Id != _page.Id)
            .ToList();

        if (otherPostsContainingPrimaryTag.Count > 0)
        {
            _relatedPosts = otherPostsContainingPrimaryTag.Count > 2 ? otherPostsContainingPrimaryTag.Take(2).ToList() : otherPostsContainingPrimaryTag;
        }

        if (_page.Metadata.TryGetValue("readTimeMinutes", out var readingTime))
        {
            _estimatedReadingTime = $"{readingTime} min read";
        }

        base.OnInitialized();

        SetSharingLinks();
        SetGiscusTheme();
    }

    private async void SetGiscusTheme()
    {
        try
        {
            var currentTheme = await JSRuntime.InvokeAsync<string>("eval", "window.themeManager?.getCurrentTheme() || 'system'");
            var effectiveTheme = await JSRuntime.InvokeAsync<string>("eval", "window.themeManager?.getEffectiveTheme() || 'light'");
            
            _giscusTheme = effectiveTheme == "dark" ? "dark" : "light";
            StateHasChanged();
        }
        catch
        {
            _giscusTheme = "light"; // fallback
        }
    }

    private void SetSharingLinks()
    {
        var currentUrl = NavigationManager.Uri;

        var encodedUrl = Uri.EscapeDataString(currentUrl).TrimEnd('/') + "/";

        _blueskyLink += $"Check out @Title: {encodedUrl}";
        _linkedinLink += encodedUrl;
        _facebookLink += encodedUrl;
        _redditUrl += $"title=@Title&url={encodedUrl}";

        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize Prism.js for syntax highlighting
            JSRuntime.InvokeVoidAsync("formatCodeBlocks");
        }
        base.OnAfterRender(firstRender);
    }
}
